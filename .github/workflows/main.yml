name: Build Canonical for Lean

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (must already exist)'
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            lib_path: target/release/libcanonical_lean.so
          - os: macos-latest
            lib_path: target/release/libcanonical_lean.dylib
          - os: windows-latest
            lib_path: target/x86_64-pc-windows-gnu/release/canonical_lean.dll

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install elan
        shell: bash
        run: |
          curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf |
            sh -s -- -y --default-toolchain none
          rm -f elan-init
          echo "$HOME/.elan/bin" >>"$GITHUB_PATH"

      - name: Install Lean
        shell: bash
        run: |
          line=$(cat lean/lean-toolchain)
          version=${line#*:}
          elan toolchain install "$version"
          elan default "$version"

      - name: Add Lean to PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "$env:USERPROFILE\.elan\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build canonical (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
      
          Write-Host "=== Detecting Lean prefix ==="
          $prefix = & lean --print-prefix
          if (-not $prefix) {
            Write-Error "lean --print-prefix returned null or empty"
          } else {
            Write-Host "Lean prefix: $prefix"
            if (-not (Test-Path $prefix)) {
              Write-Error "Prefix path '$prefix' does not exist"
            }
          }
      
          $linkerPath = Join-Path $prefix "bin\clang.exe"
          if (-not (Test-Path $linkerPath)) {
            Write-Warning "Linker path '$linkerPath' does not exist"
          } else {
            Write-Host "Found linker at $linkerPath"
          }
      
          Write-Host "=== Appending .cargo/config.toml ==="
          $lines = @(
            ""
            ""
            "[target.x86_64-pc-windows-gnu]"
            "linker = '$linkerPath'"
          )
          $cargoConfigPath = ".cargo/config.toml"
          if (-not (Test-Path ".cargo")) {
            New-Item -ItemType Directory -Path ".cargo" | Out-Null
          }
          $lines | Out-File -FilePath $cargoConfigPath -Encoding utf8 -Append
      
          Write-Host "=== .cargo/config.toml contents ==="
          Get-Content $cargoConfigPath | ForEach-Object { Write-Host $_ }
      
          Write-Host "=== Running cargo build ==="
          cargo build -p canonical_lean --release --target x86_64-pc-windows-gnu --verbose

      - name: Build canonical
        if: runner.os != 'Windows'
        run: cargo build -p canonical_lean --release

      - name: Upload built library
        run: gh release upload ${{ github.event.inputs.tag }} "${{ matrix.lib_path }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
